{
  "address": "0xCD8a1C3ba11CF5ECfa6267617243239504a98d90",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_treasuryFee",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_nodeFee",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangesCreated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "catalogIndex",
          "type": "uint256"
        }
      ],
      "name": "AddedOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "AppendedRange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newNodeFee",
          "type": "uint16"
        }
      ],
      "name": "ChangedNodeFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "ChangedTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newTreasuryFee",
          "type": "uint16"
        }
      ],
      "name": "ChangedTreasuryFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "catalogIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "name": "CustomPaymentSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "catalogIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "name": "SoldOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "catalogIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "TokenMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "UpdatedOffer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_productIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_rangeStartToken",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rangeEndToken",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rangePrice",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_rangeName",
          "type": "string[]"
        },
        {
          "internalType": "address",
          "name": "_nodeAddress",
          "type": "address"
        }
      ],
      "name": "addOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "appendOfferRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "startTokens",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "endTokens",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        }
      ],
      "name": "appendOfferRangeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "catalogIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "internalTokenIndex",
          "type": "uint256"
        }
      ],
      "name": "buyToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "catalogIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "buyTokenBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        }
      ],
      "name": "contractToOfferRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDecimals",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOfferCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getOfferInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nodeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "availableRanges",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "name": "getOfferRangeInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collectionIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensAllowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nodeFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openSales",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "catalogIndex",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "name": "setCustomPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newFee",
          "type": "uint16"
        }
      ],
      "name": "setNodeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTreasury",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newFee",
          "type": "uint16"
        }
      ],
      "name": "setTreasuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "updateOfferRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "validateRoles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canOffer",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x32708be55cd11961a66855a91afe888b04f1feef6591db3aaa3fcc5f73c435ef",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCD8a1C3ba11CF5ECfa6267617243239504a98d90",
    "transactionIndex": 0,
    "gasUsed": "3857685",
    "logsBloom": "0x
    "blockHash": "0x4d2a9f7a3d2faaed4fd54c42b05969f77ca198576c5c0d9527ac7be337bbc4cd",
    "transactionHash": "0x32708be55cd11961a66855a91afe888b04f1feef6591db3aaa3fcc5f73c435ef",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13000002,
        "transactionHash": "0x32708be55cd11961a66855a91afe888b04f1feef6591db3aaa3fcc5f73c435ef",
        "address": "0xCD8a1C3ba11CF5ECfa6267617243239504a98d90",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4d2a9f7a3d2faaed4fd54c42b05969f77ca198576c5c0d9527ac7be337bbc4cd"
      }
    ],
    "blockNumber": 13000002,
    "cumulativeGasUsed": "3857685",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3fD4268B03cce553f180E77dfC14fde00271F9B7",
    9000,
    1000
  ],
  "numDeployments": 1,
  "solcInputHash": "292129e09dc6b6cb9cef26c5a8e08772",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_treasuryFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_nodeFee\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangesCreated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"catalogIndex\",\"type\":\"uint256\"}],\"name\":\"AddedOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"AppendedRange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newNodeFee\",\"type\":\"uint16\"}],\"name\":\"ChangedNodeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"ChangedTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newTreasuryFee\",\"type\":\"uint16\"}],\"name\":\"ChangedTreasuryFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"catalogIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"name\":\"CustomPaymentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"catalogIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"name\":\"SoldOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"catalogIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"UpdatedOffer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_productIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_rangeStartToken\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rangeEndToken\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rangePrice\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_rangeName\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"}],\"name\":\"addOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"appendOfferRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"startTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"}],\"name\":\"appendOfferRangeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"catalogIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"internalTokenIndex\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"catalogIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"buyTokenBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"}],\"name\":\"contractToOfferRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDecimals\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOfferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOfferInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"availableRanges\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"name\":\"getOfferRangeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"catalogIndex\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"name\":\"setCustomPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newFee\",\"type\":\"uint16\"}],\"name\":\"setNodeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newFee\",\"type\":\"uint16\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"updateOfferRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"validateRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canOffer\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Juan M. Sanchez M.\",\"details\":\"Uses AccessControl for the minting mechanisms on other tokens!\",\"kind\":\"dev\",\"methods\":{\"addOffer(address,uint256,uint256[],uint256[],uint256[],string[],address)\":{\"details\":\"It validates that the collection has mintable tokens leftIt validates that the number of tokens allowed to sell is less or equal than the number of mintable tokens\",\"params\":{\"_nodeAddress\":\"Address of the node to be paid\",\"_productIndex\":\"Index of the collection inside the ERC721\",\"_rangeEndToken\":\"Ending token inside the ERC721 (for each range)\",\"_rangeName\":\"Name (for each range)\",\"_rangePrice\":\"Price of each range (for each range)\",\"_rangeStartToken\":\"Starting token inside the ERC721 (for each range)\",\"_tokenAddress\":\"Address of the ERC721\"}},\"buyToken(uint256,uint256,uint256)\":{\"details\":\"It validates that the Marketplace is still a minterIt splits the funds in 3 waysIt validates that the ERC721 token supports the interface for royalties and only then, it will give the funds to the creatorIf the ERC721 collection doesn't have any mintable tokens left, it will revert using the ERC721 error, not in the marketplace!\",\"params\":{\"catalogIndex\":\"Index of the sale within the catalog\",\"internalTokenIndex\":\"Index of the token within the range\",\"rangeIndex\":\"Index of the range within the offer\"}},\"constructor\":{\"details\":\"Should start up with the treasury, node and treasury fee\",\"params\":{\"_nodeFee\":\"Fee given to the node on every sale (Recommended default: 1%)\",\"_treasury\":\"The address of the Treasury\",\"_treasuryFee\":\"Fee given to the treasury every sale (Recommended default: 9%)\"}},\"contractToOfferRange(address,uint256)\":{\"params\":{\"erc721Address\":\"Address of the RAIR Token contract\",\"offerIndex\":\"Index of the offer with all the ranges\",\"productIndex\":\"Index of the product\"}},\"getOfferCount()\":{\"details\":\"Includes completed collections though\"},\"getOfferInfo(uint256)\":{\"details\":\"Translates the internal offer schema to individual values\",\"params\":{\"_index\":\"Index of the offer in this contract\"}},\"getOfferRangeInfo(uint256,uint256)\":{\"details\":\"Translates the internal offer schema to individual values\",\"params\":{\"offerIndex\":\"Index of the offer in this contract\",\"rangeIndex\":\"Index of the range inside the contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setNodeFee(uint16)\":{\"params\":{\"_newFee\":\"New Fee\"}},\"setTreasuryAddress(address)\":{\"details\":\"Make sure the treasury is a wallet address!If the treasury is a contract, make sure it has a receive function!\",\"params\":{\"_newTreasury\":\"New address\"}},\"setTreasuryFee(uint16)\":{\"params\":{\"_newFee\":\"New Fee\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"validateRoles(address)\":{\"details\":\"Doubles as a view function for anyone wondering if they can mint or if they need to approve the marketplace\",\"params\":{\"tokenAddress\":\"Address of the token to validate\"}}},\"title\":\"Minter Marketplace \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOffer(address,uint256,uint256[],uint256[],uint256[],string[],address)\":{\"notice\":\"Adds an offer to the market's catalog\"},\"buyToken(uint256,uint256,uint256)\":{\"notice\":\"Receives funds and mints a new token for the sender\"},\"constructor\":{\"notice\":\"Constructor\"},\"contractToOfferRange(address,uint256)\":{\"notice\":\"View function that returns the offer given a contract address and a product index\"},\"getOfferCount()\":{\"notice\":\"Returns the number of collections on the market\"},\"getOfferInfo(uint256)\":{\"notice\":\"Returns the basic information about an offer\"},\"getOfferRangeInfo(uint256,uint256)\":{\"notice\":\"Returns the information about an offer's range\"},\"setNodeFee(uint16)\":{\"notice\":\"Sets the new fee paid to nodes\"},\"setTreasuryAddress(address)\":{\"notice\":\"Sets the new treasury address\"},\"setTreasuryFee(uint16)\":{\"notice\":\"Sets the new treasury fee\"},\"validateRoles(address)\":{\"notice\":\"Validates that the Minter Marketplace and the message sender have the correct roles inside the ERC721\"}},\"notice\":\"Handles the minting of ERC721 RAIR Tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplaces/MarketplaceMinter.sol\":\"Minter_Marketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Marketplaces/MarketplaceMinter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.14; \\n\\n// Used on interfaces\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport \\\"../Tokens/IRAIR-ERC721.sol\\\";\\nimport \\\"../Tokens/IERC2981.sol\\\";\\n\\n// Parent classes\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n// import 'hardhat/console.sol';\\n\\n/// @title  Minter Marketplace \\n/// @notice Handles the minting of ERC721 RAIR Tokens\\n/// @author Juan M. Sanchez M.\\n/// @dev \\tUses AccessControl for the minting mechanisms on other tokens!\\ncontract Minter_Marketplace is Ownable {\\n\\tstruct offer {\\n\\t\\taddress contractAddress;\\n\\t\\taddress nodeAddress;\\n\\t\\tuint productIndex;\\n\\t\\tuint[] tokenRangeStart;\\n\\t\\tuint[] tokenRangeEnd;\\n\\t\\tuint[] tokensAllowed;\\n\\t\\tuint[] rangePrice;\\n\\t\\tstring[] rangeName;\\n\\t}\\n\\n\\t// Auxiliary struct used to avoid \\\"stack too deep\\\" errors\\n\\tstruct productInfo {\\n\\t\\tuint start;\\n\\t\\tuint end;\\n\\t\\tuint mintableTokens;\\n\\t}\\n\\n\\tstruct customPayment {\\n\\t\\taddress[] recipients;\\n\\t\\tuint[] percentages;\\n\\t}\\n\\n\\tuint16 public constant feeDecimals = 3;\\n\\n\\tmapping(address => mapping(uint => uint)) internal _contractToOffers;\\n\\tmapping(uint => customPayment) internal customPayments;\\n\\n\\toffer[] offerCatalog;\\n\\n\\taddress public treasury;\\n\\tuint public openSales;\\n\\tuint16 public treasuryFee;\\n\\tuint16 public nodeFee;\\n\\n\\tevent AddedOffer(address contractAddress, uint productIndex, uint rangesCreated, uint catalogIndex);\\n\\tevent UpdatedOffer(address contractAddress, uint offerIndex, uint rangeIndex, uint tokens, uint price, string name);\\n\\tevent AppendedRange(address contractAddress, uint productIndex, uint offerIndex, uint rangeIndex,  uint startToken, uint endToken, uint price, string name);\\n\\tevent TokenMinted(address ownerAddress, address contractAddress, uint catalogIndex, uint rangeIndex, uint tokenIndex);\\n\\tevent SoldOut(address contractAddress, uint catalogIndex, uint rangeIndex);\\n\\tevent CustomPaymentSet(uint catalogIndex, address[] recipients, uint[] percentages);\\n\\tevent ChangedTreasury(address newTreasury);\\n\\tevent ChangedTreasuryFee(address treasury, uint16 newTreasuryFee);\\n\\tevent ChangedNodeFee(uint16 newNodeFee);\\n\\n\\t/// @notice\\tConstructor\\n\\t/// @dev\\tShould start up with the treasury, node and treasury fee\\n\\t/// @param\\t_treasury\\t\\tThe address of the Treasury\\n\\t/// @param\\t_treasuryFee\\tFee given to the treasury every sale (Recommended default: 9%)\\n\\t/// @param\\t_nodeFee\\t\\tFee given to the node on every sale (Recommended default: 1%)\\n\\tconstructor(address _treasury, uint16 _treasuryFee, uint16 _nodeFee) {\\n\\t\\ttreasury = _treasury;\\n\\t\\ttreasuryFee = _treasuryFee;\\n\\t\\tnodeFee = _nodeFee;\\n\\t\\topenSales = 0;\\n\\t}\\n\\n\\tfunction setCustomPayment(uint catalogIndex, address[] calldata recipients, uint[] calldata percentages) external {\\n\\t\\trequire(recipients.length == percentages.length, \\\"Minting Marketplace: Recipients and Percentages should have the same length\\\");\\n\\t\\trequire(offerCatalog.length > 0, \\\"Minting Marketplace: There are no offer pools\\\");\\n\\t\\trequire(catalogIndex <= offerCatalog.length, \\\"Minting Marketplace: Offer Pool doesn't exist\\\");\\n\\t\\trequire(offerCatalog[catalogIndex].contractAddress != address(0), \\\"Minting Marketplace: Invalid offer pool data\\\");\\n\\t\\tvalidateRoles(offerCatalog[catalogIndex].contractAddress);\\n\\t\\tuint total = 0;\\n\\t\\tfor (uint i = 0; i < recipients.length; i++) {\\n\\t\\t\\ttotal = total + percentages[i];\\n\\t\\t}\\n\\t\\trequire(total + treasuryFee + nodeFee == 100000, \\\"Minting Marketplace: Percentages should add up to 100% (100000, including node fee and treasury fee)\\\");\\n\\t\\tcustomPayment storage aux = customPayments[catalogIndex];\\n\\t\\taux.recipients = recipients;\\n\\t\\taux.percentages = percentages;\\n\\t\\temit CustomPaymentSet(catalogIndex, recipients, percentages);\\n\\t}\\n\\n\\t/// @notice\\tView function that returns the offer given a contract address and a product index\\n\\t/// @param\\terc721Address\\tAddress of the RAIR Token contract\\n\\t/// @param\\tproductIndex\\tIndex of the product\\n\\t/// @param\\tofferIndex\\t\\tIndex of the offer with all the ranges\\n\\tfunction contractToOfferRange(address erc721Address, uint productIndex) public view returns (uint offerIndex) {\\n\\t\\trequire(offerCatalog.length > 0, \\\"Minting Marketplace: There are no offers registered\\\");\\n\\t\\trequire(offerCatalog[(_contractToOffers[erc721Address][productIndex])].contractAddress == erc721Address, \\\"Minting Marketplace: There are no offers registered for that address\\\");\\n\\t\\trequire(offerCatalog[(_contractToOffers[erc721Address][productIndex])].productIndex == productIndex, \\\"Minting Marketplace: There are is no offer registered for that product\\\");\\n\\t\\treturn (_contractToOffers[erc721Address][productIndex]);\\n\\t}\\n\\n\\t/// @notice\\tSets the new treasury address\\n\\t/// @dev\\tMake sure the treasury is a wallet address!\\n\\t/// @dev\\tIf the treasury is a contract, make sure it has a receive function!\\n\\t/// @param\\t_newTreasury\\tNew address\\n\\tfunction setTreasuryAddress(address _newTreasury) public onlyOwner {\\n\\t\\ttreasury = _newTreasury;\\n\\t\\temit ChangedTreasury(_newTreasury);\\n\\t}\\n\\n\\t/// @notice\\tSets the new treasury fee\\n\\t/// @param\\t_newFee\\tNew Fee\\n\\tfunction setTreasuryFee(uint16 _newFee) public onlyOwner {\\n\\t\\ttreasuryFee = _newFee;\\n\\t\\temit ChangedTreasuryFee(treasury, _newFee);\\n\\t}\\n\\n\\t/// @notice\\tSets the new fee paid to nodes\\n\\t/// @param\\t_newFee\\tNew Fee\\n\\tfunction setNodeFee(uint16 _newFee) public onlyOwner {\\n\\t\\tnodeFee = _newFee;\\n\\t\\temit ChangedNodeFee(_newFee);\\n\\t}\\n\\n\\t/// @notice\\tReturns the number of collections on the market\\n\\t/// @dev\\tIncludes completed collections though\\n\\tfunction getOfferCount() public view returns(uint) {\\n\\t\\treturn offerCatalog.length;\\n\\t}\\n\\n\\t/// @notice\\tReturns the basic information about an offer\\n\\t/// @dev\\tTranslates the internal offer schema to individual values\\n\\t/// @param\\t_index\\t\\tIndex of the offer in this contract\\n\\tfunction getOfferInfo(uint _index) public view returns(address contractAddress, uint productIndex, address nodeAddress, uint availableRanges) {\\n\\t\\toffer memory selectedOffer = offerCatalog[_index];\\n\\t\\treturn (\\n\\t\\t\\tselectedOffer.contractAddress,\\n\\t\\t\\tselectedOffer.productIndex,\\n\\t\\t\\tselectedOffer.nodeAddress,\\n\\t\\t\\tselectedOffer.rangeName.length\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice\\tReturns the information about an offer's range\\n\\t/// @dev\\tTranslates the internal offer schema to individual values\\n\\t/// @param\\tofferIndex\\t\\tIndex of the offer in this contract\\n\\t/// @param\\trangeIndex\\t\\tIndex of the range inside the contract\\n\\tfunction getOfferRangeInfo(uint offerIndex, uint rangeIndex) public view returns(\\n\\t\\taddress contractAddress,\\n\\t\\tuint collectionIndex,\\n\\t\\tuint tokenStart,\\n\\t\\tuint tokenEnd,\\n\\t\\tuint tokensAllowed,\\n\\t\\tuint price,\\n\\t\\tstring memory name) {\\n\\t\\toffer memory selectedOffer = offerCatalog[offerIndex];\\n\\t\\treturn (selectedOffer.contractAddress,\\n\\t\\t\\tselectedOffer.productIndex,\\n\\t\\t\\tselectedOffer.tokenRangeStart[rangeIndex],\\n\\t\\t\\tselectedOffer.tokenRangeEnd[rangeIndex],\\n\\t\\t\\tselectedOffer.tokensAllowed[rangeIndex],\\n\\t\\t\\tselectedOffer.rangePrice[rangeIndex],\\n\\t\\t\\tselectedOffer.rangeName[rangeIndex]);\\n\\t}\\n\\n\\t/// @notice Makes sure the starting and ending tokens are correct\\n\\t/// @param\\tstart \\tStarting token\\n\\t/// @param\\tend \\tEnding token\\n\\tfunction _validateRangeInfo(uint start, uint end, uint parentStart, uint parentEnd) internal pure {\\n\\t\\trequire(start <= end, \\\"Minting Marketplace: Range's starting token has to be less than the range's ending token!\\\");\\n\\t\\trequire((parentStart + end) <= parentEnd, \\\"Minting Marketplace: Range's ending token has to be less or equal than the product's ending token!\\\");\\n\\t}\\n\\n\\t/// @notice Validates that the Minter Marketplace and the message sender have the correct roles inside the ERC721\\n\\t/// @dev\\tDoubles as a view function for anyone wondering if they can mint or if they need to approve the marketplace\\n\\t/// @param\\ttokenAddress \\tAddress of the token to validate\\n\\tfunction validateRoles(address tokenAddress) public view returns (bool canOffer) {\\n\\t\\trequire(IAccessControl(tokenAddress).hasRole(bytes32(keccak256(\\\"MINTER\\\")), address(this)), \\\"Minting Marketplace: This Marketplace isn't a Minter!\\\");\\n\\t\\trequire(IAccessControl(tokenAddress).hasRole(bytes32(keccak256(\\\"CREATOR\\\")), address(msg.sender)), \\\"Minting Marketplace: Sender isn't the creator!\\\");\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/// @notice Inserts a range inside the offer\\n\\t/// @param\\tofferIndex \\tIndex of the offer to append ranges to\\n\\t/// @param\\tstartToken \\tStarting token\\n\\t/// @param\\tendToken \\tEnding token\\n\\t/// @param\\tprice \\t\\tPrice of that specific range\\n\\t/// @param\\tname \\t \\tName of the range\\n\\tfunction _appendOfferRange(\\n\\t\\tuint offerIndex,\\n\\t\\tuint startToken,\\n\\t\\tuint endToken,\\n\\t\\tuint price,\\n\\t\\tstring memory name\\n\\t) internal {\\n\\t\\toffer storage selectedOffer = offerCatalog[offerIndex];\\n\\t\\tselectedOffer.tokenRangeStart.push(startToken);\\n\\t\\tselectedOffer.tokenRangeEnd.push(endToken);\\n\\t\\tselectedOffer.rangePrice.push(price);\\n\\t\\tselectedOffer.tokensAllowed.push((endToken - startToken) + 1);\\n\\t\\tselectedOffer.rangeName.push(name);\\n\\t\\temit AppendedRange(\\n\\t\\t\\tselectedOffer.contractAddress,\\n\\t\\t\\tselectedOffer.productIndex,\\n\\t\\t\\tofferIndex,\\n\\t\\t\\tselectedOffer.rangeName.length - 1,\\n\\t\\t\\tstartToken,\\n\\t\\t\\tendToken,\\n\\t\\t\\tprice,\\n\\t\\t\\tname);\\n\\t\\topenSales++;\\n\\t}\\n\\n\\t/// @notice\\tAdds an offer to the market's catalog\\n\\t/// @dev\\tIt validates that the collection has mintable tokens left\\n\\t/// @dev\\tIt validates that the number of tokens allowed to sell is less or equal than the number of mintable tokens\\n\\t/// @param\\t_tokenAddress\\t\\tAddress of the ERC721\\n\\t/// @param\\t_productIndex\\t\\tIndex of the collection inside the ERC721\\n\\t/// @param\\t_rangeStartToken\\tStarting token inside the ERC721 (for each range)\\n\\t/// @param\\t_rangeEndToken\\t\\tEnding token inside the ERC721 (for each range)\\n\\t/// @param\\t_rangePrice\\t\\t\\tPrice of each range (for each range)\\n\\t/// @param\\t_rangeName\\t\\t\\tName (for each range)\\n\\t/// @param\\t_nodeAddress\\t\\tAddress of the node to be paid\\n\\tfunction addOffer(\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint _productIndex,\\n\\t\\tuint[] calldata _rangeStartToken,\\n\\t\\tuint[] calldata _rangeEndToken,\\n\\t\\tuint[] calldata _rangePrice,\\n\\t\\tstring[] calldata _rangeName,\\n\\t\\taddress _nodeAddress)\\n\\texternal {\\n\\t\\tvalidateRoles(_tokenAddress);\\n\\t\\trequire(_rangeStartToken.length == _rangeEndToken.length &&\\n\\t\\t\\t\\t\\t_rangePrice.length == _rangeStartToken.length &&\\n\\t\\t\\t\\t\\t_rangeName.length == _rangePrice.length, \\\"Minting Marketplace: Offer's ranges should have the same length!\\\");\\n\\n\\t\\tif (offerCatalog.length > 0) {\\n\\t\\t\\tif (_contractToOffers[_tokenAddress][_productIndex] == 0) {\\n\\t\\t\\t\\trequire(offerCatalog[_contractToOffers[_tokenAddress][_productIndex]].contractAddress != _tokenAddress ||\\n\\t\\t\\t\\t\\t\\t\\tofferCatalog[_contractToOffers[_tokenAddress][_productIndex]].productIndex != _productIndex,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"Minting Marketplace: An offer already exists for this contract and product\\\");\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trequire(_contractToOffers[_tokenAddress][_productIndex] == 0, \\\"Minting Marketplace: An offer already exists for this contract and product\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tproductInfo memory aux;\\n\\t\\t\\n\\t\\t(aux.start, aux.end, aux.mintableTokens,,) = IRAIR_ERC721(_tokenAddress).getProduct(_productIndex);\\n\\t\\trequire(aux.mintableTokens > 0, \\\"Minting Marketplace: Cannot mint more tokens from this Product!\\\");\\n\\t\\t\\n\\t\\toffer storage newOffer = offerCatalog.push();\\n\\n\\t\\tnewOffer.contractAddress = _tokenAddress;\\n\\t\\tnewOffer.nodeAddress = _nodeAddress;\\n\\t\\tnewOffer.productIndex = _productIndex;\\n\\n\\t\\tfor (uint i = 0; i < _rangeName.length; i++) {\\n\\t\\t\\t_validateRangeInfo(_rangeStartToken[i], _rangeEndToken[i], aux.start, aux.end);\\n\\t\\t\\t_appendOfferRange(\\n\\t\\t\\t\\tofferCatalog.length - 1,\\n\\t\\t\\t\\t_rangeStartToken[i],\\n\\t\\t\\t\\t_rangeEndToken[i],\\n\\t\\t\\t\\t_rangePrice[i],\\n\\t\\t\\t\\t_rangeName[i]\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t_contractToOffers[_tokenAddress][_productIndex] = offerCatalog.length - 1;\\n\\t\\temit AddedOffer(_tokenAddress, _productIndex, _rangeName.length, offerCatalog.length - 1);\\n\\t}\\n\\n\\tfunction updateOfferRange(\\n\\t\\tuint offerIndex,\\n\\t\\tuint rangeIndex,\\n\\t\\tuint startToken,\\n\\t\\tuint endToken,\\n\\t\\tuint price,\\n\\t\\tstring calldata name\\n\\t) external {\\n\\t\\toffer storage selectedOffer = offerCatalog[offerIndex];\\n\\t\\trequire(endToken <= selectedOffer.tokenRangeEnd[rangeIndex] &&\\n\\t\\t\\t\\t\\tstartToken >= selectedOffer.tokenRangeStart[rangeIndex],\\n\\t\\t\\t\\t\\t\\t'Minting Marketplace: New limits must be within the previous limits!');\\n\\t\\tvalidateRoles(selectedOffer.contractAddress);\\n\\t\\t\\n\\t\\tproductInfo memory aux;\\n\\t\\t(aux.start, aux.end,,,) = IRAIR_ERC721(selectedOffer.contractAddress).getProduct(selectedOffer.productIndex);\\n\\t\\t_validateRangeInfo(startToken, endToken, aux.start, aux.end);\\n\\t\\tselectedOffer.tokensAllowed[rangeIndex] -= (selectedOffer.tokenRangeEnd[rangeIndex] - selectedOffer.tokenRangeStart[rangeIndex]) - (endToken - startToken);\\n\\t\\tselectedOffer.tokenRangeStart[rangeIndex] = startToken;\\n\\t\\tselectedOffer.tokenRangeEnd[rangeIndex] = endToken;\\n\\t\\tselectedOffer.rangePrice[rangeIndex] = price;\\n\\t\\tselectedOffer.rangeName[rangeIndex] = name;\\n\\t\\temit UpdatedOffer(selectedOffer.contractAddress, offerIndex, rangeIndex, selectedOffer.tokensAllowed[rangeIndex], price, name);\\n\\t}\\n\\n\\tfunction appendOfferRange(\\n\\t\\tuint offerIndex,\\n\\t\\tuint startToken,\\n\\t\\tuint endToken,\\n\\t\\tuint price,\\n\\t\\tstring calldata name\\n\\t) public {\\n\\t\\tvalidateRoles(offerCatalog[offerIndex].contractAddress);\\n\\t\\tproductInfo memory aux;\\n\\t\\t(aux.start, aux.end,,,) = IRAIR_ERC721(offerCatalog[offerIndex].contractAddress).getProduct(offerCatalog[offerIndex].productIndex);\\n\\t\\t_validateRangeInfo(startToken, endToken, aux.start, aux.end);\\n\\t\\t_appendOfferRange(\\n\\t\\t\\tofferIndex,\\n\\t\\t\\tstartToken,\\n\\t\\t\\tendToken,\\n\\t\\t\\tprice,\\n\\t\\t\\tname\\n\\t\\t);\\n\\t}\\n\\n\\tfunction appendOfferRangeBatch(\\n\\t\\tuint offerIndex,\\n\\t\\tuint[] memory startTokens,\\n\\t\\tuint[] memory endTokens,\\n\\t\\tuint[] memory prices,\\n\\t\\tstring[] memory names\\n\\t) public {\\n\\t\\trequire(startTokens.length == endTokens.length &&\\n\\t\\t\\t\\t\\tprices.length == startTokens.length &&\\n\\t\\t\\t\\t\\tnames.length == prices.length, \\\"Minting Marketplace: Offer's ranges should have the same length!\\\");\\n\\t\\tvalidateRoles(offerCatalog[offerIndex].contractAddress);\\n\\t\\tproductInfo memory aux;\\n\\t\\t(aux.start, aux.end,,,) = IRAIR_ERC721(offerCatalog[offerIndex].contractAddress).getProduct(offerCatalog[offerIndex].productIndex);\\n\\t\\tfor (uint i = 0; i < names.length; i++) {\\n\\t\\t\\t_validateRangeInfo(startTokens[i], endTokens[i], aux.start, aux.end);\\n\\t\\t\\t_appendOfferRange(\\n\\t\\t\\t\\tofferIndex,\\n\\t\\t\\t\\tstartTokens[i],\\n\\t\\t\\t\\tendTokens[i],\\n\\t\\t\\t\\tprices[i],\\n\\t\\t\\t\\tnames[i]\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// @notice\\tReceives funds and mints a new token for the sender\\n\\t/// @dev\\tIt validates that the Marketplace is still a minter\\n\\t/// @dev\\tIt splits the funds in 3 ways\\n\\t/// @dev\\tIt validates that the ERC721 token supports the interface for royalties and only then, it will give the funds to the creator\\n\\t/// @dev\\tIf the ERC721 collection doesn't have any mintable tokens left, it will revert using the ERC721 error, not in the marketplace!\\n\\t/// @param\\tcatalogIndex\\t\\tIndex of the sale within the catalog\\n\\t/// @param\\trangeIndex\\t\\t\\tIndex of the range within the offer\\n\\t/// @param\\tinternalTokenIndex\\tIndex of the token within the range\\n\\tfunction buyToken(uint catalogIndex, uint rangeIndex, uint internalTokenIndex) payable public {\\n\\t\\toffer storage selectedProduct = offerCatalog[catalogIndex];\\n\\t\\trequire(selectedProduct.contractAddress != address(0), \\\"Minting Marketplace: Invalid Product Selected!\\\");\\n\\t\\trequire((selectedProduct.tokensAllowed.length > rangeIndex), \\\"Minting Marketplace: Invalid range!\\\");\\n\\t\\trequire((selectedProduct.tokensAllowed[rangeIndex] > 0), \\\"Minting Marketplace: Cannot mint more tokens for this range!\\\");\\n\\t\\trequire(selectedProduct.tokenRangeStart[rangeIndex] <= internalTokenIndex &&\\n\\t\\t\\t\\tinternalTokenIndex <= selectedProduct.tokenRangeEnd[rangeIndex],\\n\\t\\t\\t\\t\\t\\\"Minting Marketplace: Token doesn't belong in that offer range!\\\");\\n\\t\\trequire(msg.value >= selectedProduct.rangePrice[rangeIndex], \\\"Minting Marketplace: Insuficient Funds!\\\");\\n\\n\\t\\tcustomPayment storage aux = customPayments[catalogIndex];\\n\\n\\t\\tif (aux.recipients.length > 0) {\\n\\t\\t\\tfor (uint i = 0; i < aux.recipients.length; i++) {\\n\\t\\t\\t\\tpayable(aux.recipients[i]).transfer((selectedProduct.rangePrice[rangeIndex] * aux.percentages[i]) / 100000);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\taddress creatorAddress;\\n\\t\\t\\tuint256 amount;\\n\\n\\t\\t\\tbool hasFees = IERC2981(selectedProduct.contractAddress).supportsInterface(type(IERC2981).interfaceId);\\n\\t\\t\\t// If the token minted supports the EIP2981 interface, ask for the creator fee!\\n\\t\\t\\tif (hasFees) {\\n\\t\\t\\t\\t(creatorAddress, amount) = IRAIR_ERC721(selectedProduct.contractAddress).royaltyInfo(0, selectedProduct.rangePrice[rangeIndex]);\\n\\t\\t\\t\\t// Send the creator fee to the creator\\n\\t\\t\\t\\t// Should send whatever's left after transferring treasury and node fees\\n\\t\\t\\t\\tpayable(creatorAddress).transfer(selectedProduct.rangePrice[rangeIndex] * (100000 - (treasuryFee + nodeFee)) / 100000);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Pay the buyer any excess they transferred\\n\\t\\tpayable(msg.sender).transfer(msg.value - selectedProduct.rangePrice[rangeIndex]);\\n\\t\\t// Pay the treasury\\n\\t\\tpayable(treasury).transfer((selectedProduct.rangePrice[rangeIndex] * treasuryFee) / 100000);\\n\\t\\t// Pay the node\\n\\t\\tpayable(selectedProduct.nodeAddress).transfer((selectedProduct.rangePrice[rangeIndex] * nodeFee) / 100000);\\n\\n\\t\\tselectedProduct.tokensAllowed[rangeIndex]--;\\n\\t\\tif (selectedProduct.tokensAllowed[rangeIndex] == 0) {\\n\\t\\t\\topenSales--;\\n\\t\\t\\temit SoldOut(selectedProduct.contractAddress, catalogIndex, rangeIndex);\\n\\t\\t}\\n\\t\\tIRAIR_ERC721(selectedProduct.contractAddress).mint(msg.sender, selectedProduct.productIndex, internalTokenIndex);\\n\\t\\temit TokenMinted(msg.sender, selectedProduct.contractAddress, catalogIndex, rangeIndex, internalTokenIndex);\\n\\t}\\n\\n\\tfunction buyTokenBatch(uint catalogIndex, uint rangeIndex, uint[] calldata tokenIndexes, address[] calldata recipients) payable external {\\n\\t\\toffer storage selectedProduct = offerCatalog[catalogIndex];\\n\\t\\trequire(selectedProduct.contractAddress != address(0), \\\"Minting Marketplace: Invalid Product Selected!\\\");\\n\\t\\trequire((selectedProduct.tokensAllowed.length > rangeIndex), \\\"Minting Marketplace: Invalid range!\\\");\\n\\t\\trequire((selectedProduct.tokensAllowed[rangeIndex] >= tokenIndexes.length), \\\"Minting Marketplace: Cannot mint that many tokens for this range!\\\");\\n\\t\\trequire(msg.value >= (selectedProduct.rangePrice[rangeIndex] * tokenIndexes.length), \\\"Minting Marketplace: Insuficient Funds!\\\");\\n\\t\\trequire(tokenIndexes.length == recipients.length, \\\"Minting Marketplace: Token Indexes and Recipients should have the same length\\\");\\n\\n\\t\\tcustomPayment storage aux = customPayments[catalogIndex];\\n\\n\\t\\tif (aux.recipients.length > 0) {\\n\\t\\t\\tfor (uint i = 0; i < aux.recipients.length; i++) {\\n\\t\\t\\t\\tpayable(aux.recipients[i]).transfer(((selectedProduct.rangePrice[rangeIndex] * aux.percentages[i]) / 100000) * tokenIndexes.length);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\taddress creatorAddress;\\n\\t\\t\\tuint256 amount;\\n\\n\\t\\t\\tbool hasFees = IERC2981(selectedProduct.contractAddress).supportsInterface(type(IERC2981).interfaceId);\\n\\t\\t\\t\\n\\t\\t\\t// If the token minted supports the EIP2981 interface, ask for the creator fee!\\n\\t\\t\\tif (hasFees) {\\n\\t\\t\\t\\t(creatorAddress, amount) = IRAIR_ERC721(selectedProduct.contractAddress).royaltyInfo(0, selectedProduct.rangePrice[rangeIndex]);\\n\\t\\t\\t\\t// Send the creator fee to the creator\\n\\t\\t\\t\\t// Should send whatever's left after transferring treasury and node fees\\n\\t\\t\\t\\tpayable(creatorAddress).transfer((selectedProduct.rangePrice[rangeIndex] * (100000 - (treasuryFee + nodeFee)) / 100000) * tokenIndexes.length);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Pay the buyer any excess they transferred\\n\\t\\tpayable(msg.sender).transfer(msg.value - (selectedProduct.rangePrice[rangeIndex] * tokenIndexes.length));\\n\\n\\t\\t// Pay the treasury\\n\\t\\tpayable(treasury).transfer(((selectedProduct.rangePrice[rangeIndex] * treasuryFee) / 100000) * tokenIndexes.length);\\n\\t\\t\\n\\t\\t// Pay the node\\n\\t\\tpayable(selectedProduct.nodeAddress).transfer(((selectedProduct.rangePrice[rangeIndex] * nodeFee) / 100000) * tokenIndexes.length);\\n\\t\\t\\n\\t\\tselectedProduct.tokensAllowed[rangeIndex] -= tokenIndexes.length;\\n\\t\\tif (selectedProduct.tokensAllowed[rangeIndex] == 0) {\\n\\t\\t\\topenSales--;\\n\\t\\t\\temit SoldOut(selectedProduct.contractAddress, catalogIndex, rangeIndex);\\n\\t\\t}\\n\\n\\t\\tfor (uint256 i = 0; i < tokenIndexes.length; i++) {\\n\\t\\t\\trequire(selectedProduct.tokenRangeStart[rangeIndex] <= tokenIndexes[i] &&\\n\\t\\t\\t\\t\\ttokenIndexes[i] <= selectedProduct.tokenRangeEnd[rangeIndex],\\n\\t\\t\\t\\t\\t\\t\\\"Minting Marketplace: Token doesn't belong in that offer range!\\\");\\n\\t\\t\\tIRAIR_ERC721(selectedProduct.contractAddress).mint(recipients[i], selectedProduct.productIndex, tokenIndexes[i]);\\n\\t\\t\\temit TokenMinted(recipients[i], selectedProduct.contractAddress, catalogIndex, rangeIndex, tokenIndexes[i]);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0xc145e82170baac5d8933fddda6a911110adb9534419ab181d458b4dfcafddee5\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.14; \\n\\ninterface IERC2981 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256,bytes)\\\")) == 0xc155531d\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0xc155531d;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _value sale price\\n    function royaltyInfo(\\n    \\tuint256 _tokenId,\\n    \\tuint256 _salePrice)\\n    external returns (\\n    \\taddress receiver,\\n    \\tuint256 royaltyAmount);\\n\\n    /// @notice Informs callers that this contract supports ERC2981\\n    /// @dev If `_registerInterface(_INTERFACE_ID_ERC2981)` is called\\n    ///      in the initializer, this should be automatic\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @return `true` if the contract implements\\n    ///         `_INTERFACE_ID_ERC2981` and `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\",\"keccak256\":\"0x302f098d25c571723947d0f4b05744590e1effa5605c845948f1c4c175f57ea6\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/IRAIR-ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.14; \\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\ninterface IRAIR_ERC721 is IERC721 {\\n\\n\\tevent ProductCreated(uint indexed id, string name, uint startingToken, uint length);\\n\\tevent ProductCompleted(uint indexed id, string name);\\n\\t\\n\\tevent RangeLocked(uint productIndex, uint startingToken, uint endingToken, uint tokensLocked, string productName, uint lockIndex);\\n\\tevent RangeUnlocked(uint productID, uint startingToken, uint endingToken);\\n\\n\\tevent BaseURIChanged(string newURI);\\n\\tevent TokenURIChanged(uint tokenId, string newURI);\\n\\tevent ProductURIChanged(uint productId, string newURI);\\n\\tevent ContractURIChanged(string newURI);\\n\\n\\t// For OpenSea's Freezing\\n\\tevent PermanentURI(string _value, uint256 indexed _id);\\n\\t\\n\\t// Get the total number of products in the contract\\n\\tfunction getProductCount() external view returns(uint);\\n\\n\\t// Get a specific product in the contract\\n\\tfunction getProduct(uint index) external view returns(uint startingToken, uint endingToken, uint mintableTokensLeft, string memory productName, uint[] memory locks);\\n\\t\\n\\t// Mint a token inside a product\\n\\tfunction mint(address to, uint productID, uint index) external;\\n\\n\\t// Ask for the royalty info of the creator\\n\\tfunction royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n\\t\\texternal view returns (address receiver, uint256 royaltyAmount);\\n}\",\"keccak256\":\"0xb8b4b7a68a90d76a8ef2b8299439a4f700703452fd12d691ca76335b50785949\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620044d3380380620044d38339810160408190526200003491620000f7565b6200003f336200008f565b600480546001600160a01b039094166001600160a01b0319909416939093179092556006805461ffff938416620100000263ffffffff19909116939092169290921717905560006005556200014e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805161ffff81168114620000f257600080fd5b919050565b6000806000606084860312156200010d57600080fd5b83516001600160a01b03811681146200012557600080fd5b92506200013560208501620000df565b91506200014560408501620000df565b90509250925092565b614375806200015e6000396000f3fe6080604052600436106101405760003560e01c80639c13108c116100b6578063d048db371161006f578063d048db37146103d7578063de2d554b146103ec578063e4ccbe6c146103ff578063f2fde38b1461041f578063f41625301461043f578063f7ca892a1461046057600080fd5b80639c13108c146102f3578063a652db4914610321578063b430029514610341578063ca3dba5d14610361578063cc0f178614610394578063cc32d176146103bc57600080fd5b806361d027b31161010857806361d027b3146102285780636605bfda14610260578063665b64dd14610280578063715018a6146102a057806375cb00ea146102b55780638da5cb5b146102d557600080fd5b806326502ed7146101455780632a1da9821461015a5780633539a52c146101b857806338b2c833146101d8578063607814b2146101f8575b600080fd5b6101586101533660046135a5565b610476565b005b34801561016657600080fd5b5061017a610175366004613627565b610d92565b6040516101af94939291906001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b60405180910390f35b3480156101c457600080fd5b506101586101d3366004613681565b611047565b3480156101e457600080fd5b506101586101f33660046137d3565b6111c8565b34801561020457600080fd5b50610218610213366004613969565b6113dd565b60405190151581526020016101af565b34801561023457600080fd5b50600454610248906001600160a01b031681565b6040516001600160a01b0390911681526020016101af565b34801561026c57600080fd5b5061015861027b366004613969565b6115d1565b34801561028c57600080fd5b5061015861029b36600461398d565b611650565b3480156102ac57600080fd5b50610158611b3e565b3480156102c157600080fd5b506101586102d0366004613a7f565b611b74565b3480156102e157600080fd5b506000546001600160a01b0316610248565b3480156102ff57600080fd5b5061031361030e366004613af2565b611edf565b6040519081526020016101af565b34801561032d57600080fd5b5061015861033c366004613b1e565b612117565b34801561034d57600080fd5b5061015861035c366004613b42565b612199565b34801561036d57600080fd5b5061038161037c366004613bbb565b612525565b6040516101af9796959493929190613c35565b3480156103a057600080fd5b506103a9600381565b60405161ffff90911681526020016101af565b3480156103c857600080fd5b506006546103a99061ffff1681565b3480156103e357600080fd5b50600354610313565b6101586103fa366004613c81565b61287a565b34801561040b57600080fd5b5061015861041a366004613b1e565b612fc5565b34801561042b57600080fd5b5061015861043a366004613969565b61303d565b34801561044b57600080fd5b506006546103a99062010000900461ffff1681565b34801561046c57600080fd5b5061031360055481565b60006003878154811061048b5761048b613cad565b6000918252602090912060089091020180549091506001600160a01b03166104ce5760405162461bcd60e51b81526004016104c590613cc3565b60405180910390fd5b600581015486106104f15760405162461bcd60e51b81526004016104c590613d11565b8484905081600501878154811061050a5761050a613cad565b906000526020600020015410156105935760405162461bcd60e51b815260206004820152604160248201527f4d696e74696e67204d61726b6574706c6163653a2043616e6e6f74206d696e7460448201527f2074686174206d616e7920746f6b656e7320666f7220746869732072616e67656064820152602160f81b608482015260a4016104c5565b848490508160060187815481106105ac576105ac613cad565b90600052602060002001546105c19190613d6a565b3410156105e05760405162461bcd60e51b81526004016104c590613d89565b83821461066b5760405162461bcd60e51b815260206004820152604d60248201527f4d696e74696e67204d61726b6574706c6163653a20546f6b656e20496e64657860448201527f657320616e6420526563697069656e74732073686f756c64206861766520746860648201526c0ca40e6c2daca40d8cadccee8d609b1b608482015260a4016104c5565b60008781526002602052604090208054156107655760005b815481101561075f578160000181815481106106a1576106a1613cad565b6000918252602090912001546001830180546001600160a01b03909216916108fc918991620186a09190869081106106db576106db613cad565b9060005260206000200154876006018d815481106106fb576106fb613cad565b90600052602060002001546107109190613d6a565b61071a9190613dd0565b6107249190613d6a565b6040518115909202916000818181858888f1935050505015801561074c573d6000803e3d6000fd5b508061075781613df2565b915050610683565b50610938565b81546040516301ffc9a760e01b8152632baae9fd60e01b6004820152600091829182916001600160a01b0316906301ffc9a790602401602060405180830381865afa1580156107b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dc9190613e0b565b905080156109345784546006860180546001600160a01b0390921691632a55205a916000918e90811061081157610811613cad565b90600052602060002001546040518363ffffffff1660e01b8152600401610842929190918252602082015260400190565b6040805180830381865afa15801561085e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108829190613e2d565b60065491945092506001600160a01b038416906108fc908a90620186a0906108b69061ffff62010000820481169116613e5b565b6108c79061ffff16620186a0613e81565b62ffffff16896006018f815481106108e1576108e1613cad565b90600052602060002001546108f69190613d6a565b6109009190613dd0565b61090a9190613d6a565b6040518115909202916000818181858888f19350505050158015610932573d6000803e3d6000fd5b505b5050505b336001600160a01b03166108fc87879050846006018a8154811061095e5761095e613cad565b90600052602060002001546109739190613d6a565b61097d9034613ea5565b6040518115909202916000818181858888f193505050501580156109a5573d6000803e3d6000fd5b506004546006805490840180546001600160a01b03909316926108fc928992620186a09261ffff909216918d9081106109e0576109e0613cad565b90600052602060002001546109f59190613d6a565b6109ff9190613dd0565b610a099190613d6a565b6040518115909202916000818181858888f19350505050158015610a31573d6000803e3d6000fd5b5060018201546006805490840180546001600160a01b03909316926108fc928992620186a0926201000090920461ffff16918d908110610a7357610a73613cad565b9060005260206000200154610a889190613d6a565b610a929190613dd0565b610a9c9190613d6a565b6040518115909202916000818181858888f19350505050158015610ac4573d6000803e3d6000fd5b5085859050826005018881548110610ade57610ade613cad565b906000526020600020016000828254610af79190613ea5565b909155505060058201805488908110610b1257610b12613cad565b9060005260206000200154600003610b825760058054906000610b3483613ebc565b909155505081546040517fd7597aa2d6438f91b7d71e7d13764734af94bc7db28326e194bfab67236e58c191610b79916001600160a01b03909116908b908b90613ed3565b60405180910390a15b60005b85811015610d8757868682818110610b9f57610b9f613cad565b90506020020135836003018981548110610bbb57610bbb613cad565b906000526020600020015411158015610c0b5750826004018881548110610be457610be4613cad565b9060005260206000200154878783818110610c0157610c01613cad565b9050602002013511155b610c275760405162461bcd60e51b81526004016104c590613ef4565b82546001600160a01b031663156e29f6868684818110610c4957610c49613cad565b9050602002016020810190610c5e9190613969565b85600201548a8a86818110610c7557610c75613cad565b905060200201356040518463ffffffff1660e01b8152600401610c9a93929190613ed3565b600060405180830381600087803b158015610cb457600080fd5b505af1158015610cc8573d6000803e3d6000fd5b505050507f188c6e7ce5cf6a45f5d4441da49a243005c388c7f4f00137378ba3d058baf01d858583818110610cff57610cff613cad565b9050602002016020810190610d149190613969565b84546001600160a01b03168b8b8b8b87818110610d3357610d33613cad565b604080516001600160a01b039889168152979096166020888101919091529587019490945250606085019190915291020135608082015260a00160405180910390a180610d7f81613df2565b915050610b85565b505050505050505050565b600080600080600060038681548110610dad57610dad613cad565b60009182526020918290206040805161010081018252600890930290910180546001600160a01b0390811684526001820154168385015260028101548383015260038101805483518187028101870190945280845293949193606086019392830182828015610e3b57602002820191906000526020600020905b815481526020019060010190808311610e27575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610e9357602002820191906000526020600020905b815481526020019060010190808311610e7f575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610eeb57602002820191906000526020600020905b815481526020019060010190808311610ed7575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015610f4357602002820191906000526020600020905b815481526020019060010190808311610f2f575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101561101d578382906000526020600020018054610f9090613f51565b80601f0160208091040260200160405190810160405280929190818152602001828054610fbc90613f51565b80156110095780601f10610fde57610100808354040283529160200191611009565b820191906000526020600020905b815481529060010190602001808311610fec57829003601f168201915b505050505081526020019060010190610f71565b5050509152505080516040820151602083015160e090930151519199909850919650945092505050565b61107c6003878154811061105d5761105d613cad565b60009182526020909120600890910201546001600160a01b03166113dd565b506110a160405180606001604052806000815260200160008152602001600081525090565b600387815481106110b4576110b4613cad565b6000918252602090912060089091020154600380546001600160a01b039092169163b9db15b491908a9081106110ec576110ec613cad565b9060005260206000209060080201600201546040518263ffffffff1660e01b815260040161111c91815260200190565b600060405180830381865afa158015611139573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111619190810190613fe6565b5050506020830181905281835261117c9188918891906130d8565b6111bf8787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061322a92505050565b50505050505050565b825184511480156111da575083518251145b80156111e7575081518151145b6112035760405162461bcd60e51b81526004016104c5906140a4565b6112196003868154811061105d5761105d613cad565b5061123e60405180606001604052806000815260200160008152602001600081525090565b6003868154811061125157611251613cad565b6000918252602090912060089091020154600380546001600160a01b039092169163b9db15b491908990811061128957611289613cad565b9060005260206000209060080201600201546040518263ffffffff1660e01b81526004016112b991815260200190565b600060405180830381865afa1580156112d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112fe9190810190613fe6565b5050506020830152815260005b82518110156111bf5761135a86828151811061132957611329613cad565b602002602001015186838151811061134357611343613cad565b6020026020010151846000015185602001516130d8565b6113cb8787838151811061137057611370613cad565b602002602001015187848151811061138a5761138a613cad565b60200260200101518785815181106113a4576113a4613cad565b60200260200101518786815181106113be576113be613cad565b602002602001015161322a565b806113d581613df2565b91505061130b565b604051632474521560e21b81527ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc960048201523060248201526000906001600160a01b038316906391d1485490604401602060405180830381865afa15801561144a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146e9190613e0b565b6114d85760405162461bcd60e51b815260206004820152603560248201527f4d696e74696e67204d61726b6574706c6163653a2054686973204d61726b6574604482015274706c6163652069736e27742061204d696e7465722160581b60648201526084016104c5565b604051632474521560e21b81527f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db660048201523360248201526001600160a01b038316906391d1485490604401602060405180830381865afa158015611542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115669190613e0b565b6115c95760405162461bcd60e51b815260206004820152602e60248201527f4d696e74696e67204d61726b6574706c6163653a2053656e6465722069736e2760448201526d74207468652063726561746f722160901b60648201526084016104c5565b506001919050565b6000546001600160a01b031633146115fb5760405162461bcd60e51b81526004016104c590614102565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f63cc689e9d3377465b51fb094ea4ca5e0a1436b21f1ad30d707c696111c66500906020015b60405180910390a150565b6116598b6113dd565b50878614801561166857508388145b801561167357508184145b61168f5760405162461bcd60e51b81526004016104c5906140a4565b600354156117cc576001600160a01b038b1660009081526001602090815260408083208d8452909152812054900361178b576001600160a01b038b1660008181526001602090815260408083208e84529091529020546003805490919081106116fa576116fa613cad565b60009182526020909120600890910201546001600160a01b031614158061176a57506001600160a01b038b1660009081526001602090815260408083208d8452909152902054600380548c9290811061175557611755613cad565b90600052602060002090600802016002015414155b6117865760405162461bcd60e51b81526004016104c590614137565b6117cc565b6001600160a01b038b1660009081526001602090815260408083208d8452909152902054156117cc5760405162461bcd60e51b81526004016104c590614137565b6117f060405180606001604052806000815260200160008152602001600081525090565b604051632e76c56d60e21b8152600481018c90526001600160a01b038d169063b9db15b490602401600060405180830381865afa158015611835573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261185d9190810190613fe6565b50506040840181905260208401919091529082526118e35760405162461bcd60e51b815260206004820152603f60248201527f4d696e74696e67204d61726b6574706c6163653a2043616e6e6f74206d696e7460448201527f206d6f726520746f6b656e732066726f6d20746869732050726f64756374210060648201526084016104c5565b6000600360018160018154018082558091505003906000526020600020906008020190508c8160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550828160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b816002018190555060005b84811015611a7f576119b18c8c8381811061198257611982613cad565b905060200201358b8b8481811061199b5761199b613cad565b90506020020135856000015186602001516130d8565b600354611a6d906119c490600190613ea5565b8d8d848181106119d6576119d6613cad565b905060200201358c8c858181106119ef576119ef613cad565b905060200201358b8b86818110611a0857611a08613cad565b905060200201358a8a87818110611a2157611a21613cad565b9050602002810190611a3391906141a7565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061322a92505050565b80611a7781613df2565b915050611965565b50600354611a8f90600190613ea5565b600160008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020819055507f9c82f4230a033475cfb564c6eb24f4ad45139901a657e8edd9a6cd234e3549498d8d878790506001600380549050611b029190613ea5565b604080516001600160a01b039095168552602085019390935291830152606082015260800160405180910390a150505050505050505050505050565b6000546001600160a01b03163314611b685760405162461bcd60e51b81526004016104c590614102565b611b726000613370565b565b600060038881548110611b8957611b89613cad565b90600052602060002090600802019050806004018781548110611bae57611bae613cad565b90600052602060002001548511158015611be75750806003018781548110611bd857611bd8613cad565b90600052602060002001548610155b611c655760405162461bcd60e51b815260206004820152604360248201527f4d696e74696e67204d61726b6574706c6163653a204e6577206c696d6974732060448201527f6d7573742062652077697468696e207468652070726576696f7573206c696d6960648201526274732160e81b608482015260a4016104c5565b8054611c79906001600160a01b03166113dd565b50611c9e60405180606001604052806000815260200160008152602001600081525090565b81546002830154604051632e76c56d60e21b81526001600160a01b039092169163b9db15b491611cd49160040190815260200190565b600060405180830381865afa158015611cf1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d199190810190613fe6565b50505060208301819052818352611d349189918991906130d8565b611d3e8787613ea5565b826003018981548110611d5357611d53613cad565b9060005260206000200154836004018a81548110611d7357611d73613cad565b9060005260206000200154611d889190613ea5565b611d929190613ea5565b826005018981548110611da757611da7613cad565b906000526020600020016000828254611dc09190613ea5565b9250508190555086826003018981548110611ddd57611ddd613cad565b906000526020600020018190555085826004018981548110611e0157611e01613cad565b906000526020600020018190555084826006018981548110611e2557611e25613cad565b90600052602060002001819055508383836007018a81548110611e4a57611e4a613cad565b906000526020600020019190611e619291906133c0565b5081546005830180547fd99934f5b053ba28c54ae74875195b688f9367ba5b0c50f5233e692eb91549c8926001600160a01b0316918c918c919082908110611eab57611eab613cad565b9060005260206000200154898989604051611ecc97969594939291906141ed565b60405180910390a1505050505050505050565b600354600090611f4d5760405162461bcd60e51b815260206004820152603360248201527f4d696e74696e67204d61726b6574706c6163653a20546865726520617265206e6044820152721bc81bd999995c9cc81c9959da5cdd195c9959606a1b60648201526084016104c5565b6001600160a01b0383166000818152600160209081526040808320868452909152902054600380549091908110611f8657611f86613cad565b60009182526020909120600890910201546001600160a01b0316146120215760405162461bcd60e51b8152602060048201526044602482018190527f4d696e74696e67204d61726b6574706c6163653a20546865726520617265206e908201527f6f206f6666657273207265676973746572656420666f722074686174206164646064820152637265737360e01b608482015260a4016104c5565b6001600160a01b038316600090815260016020908152604080832085845290915290205460038054849290811061205a5761205a613cad565b906000526020600020906008020160020154146120ee5760405162461bcd60e51b815260206004820152604660248201527f4d696e74696e67204d61726b6574706c6163653a20546865726520617265206960448201527f73206e6f206f66666572207265676973746572656420666f72207468617420706064820152651c9bd91d58dd60d21b608482015260a4016104c5565b506001600160a01b03919091166000908152600160209081526040808320938352929052205490565b6000546001600160a01b031633146121415760405162461bcd60e51b81526004016104c590614102565b6006805461ffff191661ffff8316908117909155600454604080516001600160a01b03909216825260208201929092527f2adb51c26afe364a53c16cd44e82bdf5a52680ad11c64f2dbeb5bdb3764f731d9101611645565b8281146122225760405162461bcd60e51b815260206004820152604b60248201527f4d696e74696e67204d61726b6574706c6163653a20526563697069656e74732060448201527f616e642050657263656e74616765732073686f756c642068617665207468652060648201526a0e6c2daca40d8cadccee8d60ab1b608482015260a4016104c5565b6003546122875760405162461bcd60e51b815260206004820152602d60248201527f4d696e74696e67204d61726b6574706c6163653a20546865726520617265206e60448201526c6f206f6666657220706f6f6c7360981b60648201526084016104c5565b6003548511156122ef5760405162461bcd60e51b815260206004820152602d60248201527f4d696e74696e67204d61726b6574706c6163653a204f6666657220506f6f6c2060448201526c191bd95cdb89dd08195e1a5cdd609a1b60648201526084016104c5565b60006001600160a01b03166003868154811061230d5761230d613cad565b60009182526020909120600890910201546001600160a01b0316036123895760405162461bcd60e51b815260206004820152602c60248201527f4d696e74696e67204d61726b6574706c6163653a20496e76616c6964206f666660448201526b657220706f6f6c206461746160a01b60648201526084016104c5565b61239f6003868154811061105d5761105d613cad565b506000805b848110156123e4578383828181106123be576123be613cad565b90506020020135826123d09190614247565b9150806123dc81613df2565b9150506123a4565b5060065461ffff6201000082048116916123ff911683614247565b6124099190614247565b620186a0146124b45760405162461bcd60e51b8152602060048201526064602482018190527f4d696e74696e67204d61726b6574706c6163653a2050657263656e746167657360448301527f2073686f756c642061646420757020746f203130302520283130303030302c20908201527f696e636c7564696e67206e6f64652066656520616e64207472656173757279206084820152636665652960e01b60a482015260c4016104c5565b60008681526002602052604090206124cd818787613444565b506124dc600182018585613497565b507f40a049f3fdcbf6879c736779d7d3043e94267127987fd5a0e13a7284a6a46dc9878787878760405161251495949392919061425f565b60405180910390a150505050505050565b6000806000806000806060600060038a8154811061254557612545613cad565b60009182526020918290206040805161010081018252600890930290910180546001600160a01b03908116845260018201541683850152600281015483830152600381018054835181870281018701909452808452939491936060860193928301828280156125d357602002820191906000526020600020905b8154815260200190600101908083116125bf575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561262b57602002820191906000526020600020905b815481526020019060010190808311612617575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561268357602002820191906000526020600020905b81548152602001906001019080831161266f575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156126db57602002820191906000526020600020905b8154815260200190600101908083116126c7575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156127b557838290600052602060002001805461272890613f51565b80601f016020809104026020016040519081016040528092919081815260200182805461275490613f51565b80156127a15780601f10612776576101008083540402835291602001916127a1565b820191906000526020600020905b81548152906001019060200180831161278457829003601f168201915b505050505081526020019060010190612709565b505050508152505090508060000151816040015182606001518b815181106127df576127df613cad565b602002602001015183608001518c815181106127fd576127fd613cad565b60200260200101518460a001518d8151811061281b5761281b613cad565b60200260200101518560c001518e8151811061283957612839613cad565b60200260200101518660e001518f8151811061285757612857613cad565b602002602001015197509750975097509750975097505092959891949750929550565b60006003848154811061288f5761288f613cad565b6000918252602090912060089091020180549091506001600160a01b03166128c95760405162461bcd60e51b81526004016104c590613cc3565b600581015483106128ec5760405162461bcd60e51b81526004016104c590613d11565b600081600501848154811061290357612903613cad565b9060005260206000200154116129815760405162461bcd60e51b815260206004820152603c60248201527f4d696e74696e67204d61726b6574706c6163653a2043616e6e6f74206d696e7460448201527f206d6f726520746f6b656e7320666f7220746869732072616e6765210000000060648201526084016104c5565b8181600301848154811061299757612997613cad565b9060005260206000200154111580156129cf57508060040183815481106129c0576129c0613cad565b90600052602060002001548211155b6129eb5760405162461bcd60e51b81526004016104c590613ef4565b806006018381548110612a0057612a00613cad565b9060005260206000200154341015612a2a5760405162461bcd60e51b81526004016104c590613d89565b6000848152600260205260409020805415612b175760005b8154811015612b1157816000018181548110612a6057612a60613cad565b6000918252602090912001546001830180546001600160a01b03909216916108fc91620186a09185908110612a9757612a97613cad565b9060005260206000200154866006018981548110612ab757612ab7613cad565b9060005260206000200154612acc9190613d6a565b612ad69190613dd0565b6040518115909202916000818181858888f19350505050158015612afe573d6000803e3d6000fd5b5080612b0981613df2565b915050612a42565b50612cde565b81546040516301ffc9a760e01b8152632baae9fd60e01b6004820152600091829182916001600160a01b0316906301ffc9a790602401602060405180830381865afa158015612b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8e9190613e0b565b90508015612cda5784546006860180546001600160a01b0390921691632a55205a916000918b908110612bc357612bc3613cad565b90600052602060002001546040518363ffffffff1660e01b8152600401612bf4929190918252602082015260400190565b6040805180830381865afa158015612c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c349190613e2d565b60065491945092506001600160a01b038416906108fc90620186a090612c669061ffff62010000820481169116613e5b565b612c779061ffff16620186a0613e81565b62ffffff16886006018b81548110612c9157612c91613cad565b9060005260206000200154612ca69190613d6a565b612cb09190613dd0565b6040518115909202916000818181858888f19350505050158015612cd8573d6000803e3d6000fd5b505b5050505b336001600160a01b03166108fc836006018681548110612d0057612d00613cad565b906000526020600020015434612d169190613ea5565b6040518115909202916000818181858888f19350505050158015612d3e573d6000803e3d6000fd5b506004546006805490840180546001600160a01b03909316926108fc92620186a09261ffff9091169189908110612d7757612d77613cad565b9060005260206000200154612d8c9190613d6a565b612d969190613dd0565b6040518115909202916000818181858888f19350505050158015612dbe573d6000803e3d6000fd5b5060018201546006805490840180546001600160a01b03909316926108fc92620186a0926201000090910461ffff169189908110612dfe57612dfe613cad565b9060005260206000200154612e139190613d6a565b612e1d9190613dd0565b6040518115909202916000818181858888f19350505050158015612e45573d6000803e3d6000fd5b50816005018481548110612e5b57612e5b613cad565b60009182526020822001805491612e7183613ebc565b9190505550816005018481548110612e8b57612e8b613cad565b9060005260206000200154600003612efb5760058054906000612ead83613ebc565b909155505081546040517fd7597aa2d6438f91b7d71e7d13764734af94bc7db28326e194bfab67236e58c191612ef2916001600160a01b039091169088908890613ed3565b60405180910390a15b81546002830154604051630ab714fb60e11b81526001600160a01b039092169163156e29f691612f32913391908890600401613ed3565b600060405180830381600087803b158015612f4c57600080fd5b505af1158015612f60573d6000803e3d6000fd5b50508354604080513381526001600160a01b039092166020830152810188905260608101879052608081018690527f188c6e7ce5cf6a45f5d4441da49a243005c388c7f4f00137378ba3d058baf01d925060a001905060405180910390a15050505050565b6000546001600160a01b03163314612fef5760405162461bcd60e51b81526004016104c590614102565b6006805463ffff000019166201000061ffff8416908102919091179091556040519081527f6a6cc0807c3fb0910ab842e5fd4c193307b3cff967f1a7d096538e4961884b7090602001611645565b6000546001600160a01b031633146130675760405162461bcd60e51b81526004016104c590614102565b6001600160a01b0381166130cc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104c5565b6130d581613370565b50565b828411156131745760405162461bcd60e51b815260206004820152605960248201527f4d696e74696e67204d61726b6574706c6163653a2052616e676527732073746160448201527f7274696e6720746f6b656e2068617320746f206265206c657373207468616e2060648201527f7468652072616e6765277320656e64696e6720746f6b656e2100000000000000608482015260a4016104c5565b8061317f8484614247565b11156132245760405162461bcd60e51b815260206004820152606260248201527f4d696e74696e67204d61726b6574706c6163653a2052616e6765277320656e6460448201527f696e6720746f6b656e2068617320746f206265206c657373206f72206571756160648201527f6c207468616e207468652070726f64756374277320656e64696e6720746f6b656084820152616e2160f01b60a482015260c4016104c5565b50505050565b60006003868154811061323f5761323f613cad565b600091825260208083206003600890930201918201805460018181018355918552828520018990556004830180548083018255908552828520018890556006830180549182018155845292209091018490559050600581016132a18686613ea5565b6132ac906001614247565b8154600181810184556000938452602080852090920192909255600784018054928301815583529182902084516132eb939190920191908501906134d1565b508054600282015460078301547f5fb7e8962f72a7aa133e869363451a963b669f4833ca29bc394ebd53f121b98f926001600160a01b03169190899061333390600190613ea5565b8989898960405161334b9897969594939291906142ea565b60405180910390a16005805490600061336383613df2565b9190505550505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546133cc90613f51565b90600052602060002090601f0160209004810192826133ee5760008555613434565b82601f106134075782800160ff19823516178555613434565b82800160010185558215613434579182015b82811115613434578235825591602001919060010190613419565b50613440929150613545565b5090565b828054828255906000526020600020908101928215613434579160200282015b828111156134345781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190613464565b8280548282559060005260206000209081019282156134345791602002820182811115613434578235825591602001919060010190613419565b8280546134dd90613f51565b90600052602060002090601f0160209004810192826134ff5760008555613434565b82601f1061351857805160ff1916838001178555613434565b82800160010185558215613434579182015b8281111561343457825182559160200191906001019061352a565b5b808211156134405760008155600101613546565b60008083601f84011261356c57600080fd5b5081356001600160401b0381111561358357600080fd5b6020830191508360208260051b850101111561359e57600080fd5b9250929050565b600080600080600080608087890312156135be57600080fd5b863595506020870135945060408701356001600160401b03808211156135e357600080fd5b6135ef8a838b0161355a565b9096509450606089013591508082111561360857600080fd5b5061361589828a0161355a565b979a9699509497509295939492505050565b60006020828403121561363957600080fd5b5035919050565b60008083601f84011261365257600080fd5b5081356001600160401b0381111561366957600080fd5b60208301915083602082850101111561359e57600080fd5b60008060008060008060a0878903121561369a57600080fd5b8635955060208701359450604087013593506060870135925060808701356001600160401b038111156136cc57600080fd5b61361589828a01613640565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613716576137166136d8565b604052919050565b60006001600160401b03821115613737576137376136d8565b5060051b60200190565b600082601f83011261375257600080fd5b813560206137676137628361371e565b6136ee565b82815260059290921b8401810191818101908684111561378657600080fd5b8286015b848110156137a1578035835291830191830161378a565b509695505050505050565b60006001600160401b038211156137c5576137c56136d8565b50601f01601f191660200190565b600080600080600060a086880312156137eb57600080fd5b8535945060208601356001600160401b038082111561380957600080fd5b61381589838a01613741565b9550604088013591508082111561382b57600080fd5b61383789838a01613741565b9450606088013591508082111561384d57600080fd5b61385989838a01613741565b9350608088013591508082111561386f57600080fd5b818801915088601f83011261388357600080fd5b81356138916137628261371e565b8082825260208201915060208360051b86010192508b8311156138b357600080fd5b602085015b838110156139315784813511156138ce57600080fd5b803586018d603f8201126138e157600080fd5b60208101356138f2613762826137ac565b8181528f604083850101111561390757600080fd5b816040840160208301376000602083830101528086525050506020830192506020810190506138b8565b5080955050505050509295509295909350565b6001600160a01b03811681146130d557600080fd5b803561396481613944565b919050565b60006020828403121561397b57600080fd5b813561398681613944565b9392505050565b600080600080600080600080600080600060e08c8e0312156139ae57600080fd5b6139b78c613959565b9a5060208c013599506001600160401b038060408e013511156139d957600080fd5b6139e98e60408f01358f0161355a565b909a50985060608d01358110156139ff57600080fd5b613a0f8e60608f01358f0161355a565b909850965060808d0135811015613a2557600080fd5b613a358e60808f01358f0161355a565b909650945060a08d0135811015613a4b57600080fd5b50613a5c8d60a08e01358e0161355a565b9093509150613a6d60c08d01613959565b90509295989b509295989b9093969950565b600080600080600080600060c0888a031215613a9a57600080fd5b873596506020880135955060408801359450606088013593506080880135925060a08801356001600160401b03811115613ad357600080fd5b613adf8a828b01613640565b989b979a50959850939692959293505050565b60008060408385031215613b0557600080fd5b8235613b1081613944565b946020939093013593505050565b600060208284031215613b3057600080fd5b813561ffff8116811461398657600080fd5b600080600080600060608688031215613b5a57600080fd5b8535945060208601356001600160401b0380821115613b7857600080fd5b613b8489838a0161355a565b90965094506040880135915080821115613b9d57600080fd5b50613baa8882890161355a565b969995985093965092949392505050565b60008060408385031215613bce57600080fd5b50508035926020909101359150565b60005b83811015613bf8578181015183820152602001613be0565b838111156132245750506000910152565b60008151808452613c21816020860160208601613bdd565b601f01601f19169290920160200192915050565b60018060a01b03881681528660208201528560408201528460608201528360808201528260a082015260e060c08201526000613c7460e0830184613c09565b9998505050505050505050565b600080600060608486031215613c9657600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052603260045260246000fd5b6020808252602e908201527f4d696e74696e67204d61726b6574706c6163653a20496e76616c69642050726f60408201526d647563742053656c65637465642160901b606082015260800190565b60208082526023908201527f4d696e74696e67204d61726b6574706c6163653a20496e76616c69642072616e60408201526267652160e81b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615613d8457613d84613d54565b500290565b60208082526027908201527f4d696e74696e67204d61726b6574706c6163653a20496e737566696369656e746040820152662046756e64732160c81b606082015260800190565b600082613ded57634e487b7160e01b600052601260045260246000fd5b500490565b600060018201613e0457613e04613d54565b5060010190565b600060208284031215613e1d57600080fd5b8151801515811461398657600080fd5b60008060408385031215613e4057600080fd5b8251613e4b81613944565b6020939093015192949293505050565b600061ffff808316818516808303821115613e7857613e78613d54565b01949350505050565b600062ffffff83811690831681811015613e9d57613e9d613d54565b039392505050565b600082821015613eb757613eb7613d54565b500390565b600081613ecb57613ecb613d54565b506000190190565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252603e908201527f4d696e74696e67204d61726b6574706c6163653a20546f6b656e20646f65736e60408201527f27742062656c6f6e6720696e2074686174206f666665722072616e6765210000606082015260800190565b600181811c90821680613f6557607f821691505b602082108103613f8557634e487b7160e01b600052602260045260246000fd5b50919050565b600082601f830112613f9c57600080fd5b81516020613fac6137628361371e565b82815260059290921b84018101918181019086841115613fcb57600080fd5b8286015b848110156137a15780518352918301918301613fcf565b600080600080600060a08688031215613ffe57600080fd5b85519450602086015193506040860151925060608601516001600160401b038082111561402a57600080fd5b818801915088601f83011261403e57600080fd5b815161404c613762826137ac565b8181528a602083860101111561406157600080fd5b614072826020830160208701613bdd565b60808a01519095509250508082111561408a57600080fd5b5061409788828901613f8b565b9150509295509295909350565b602080825260409082018190527f4d696e74696e67204d61726b6574706c6163653a204f6666657227732072616e908201527f6765732073686f756c642068617665207468652073616d65206c656e67746821606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252604a908201527f4d696e74696e67204d61726b6574706c6163653a20416e206f6666657220616c60408201527f72656164792065786973747320666f72207468697320636f6e747261637420616060820152691b99081c1c9bd91d58dd60b21b608082015260a00190565b6000808335601e198436030181126141be57600080fd5b8301803591506001600160401b038211156141d857600080fd5b60200191503681900382131561359e57600080fd5b60018060a01b038816815286602082015285604082015284606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f909201601f191601019695505050505050565b6000821982111561425a5761425a613d54565b500190565b85815260606020808301829052908201859052600090869060808401835b888110156142ab57833561429081613944565b6001600160a01b03168252928201929082019060010161427d565b5084810360408601528581526001600160fb1b038611156142cb57600080fd5b8560051b92508287838301376000920101908152979650505050505050565b600061010060018060a01b038b1683528960208401528860408401528760608401528660808401528560a08401528460c08401528060e084015261433081840185613c09565b9b9a505050505050505050505056fea2646970667358221220ad28266f3ad246df00a3dc7f15d8183e2688efc0dd949fa8daddecc143ae3e7264736f6c634300080e0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Juan M. Sanchez M.",
    "details": "Uses AccessControl for the minting mechanisms on other tokens!",
    "kind": "dev",
    "methods": {
      "addOffer(address,uint256,uint256[],uint256[],uint256[],string[],address)": {
        "details": "It validates that the collection has mintable tokens leftIt validates that the number of tokens allowed to sell is less or equal than the number of mintable tokens",
        "params": {
          "_nodeAddress": "Address of the node to be paid",
          "_productIndex": "Index of the collection inside the ERC721",
          "_rangeEndToken": "Ending token inside the ERC721 (for each range)",
          "_rangeName": "Name (for each range)",
          "_rangePrice": "Price of each range (for each range)",
          "_rangeStartToken": "Starting token inside the ERC721 (for each range)",
          "_tokenAddress": "Address of the ERC721"
        }
      },
      "buyToken(uint256,uint256,uint256)": {
        "details": "It validates that the Marketplace is still a minterIt splits the funds in 3 waysIt validates that the ERC721 token supports the interface for royalties and only then, it will give the funds to the creatorIf the ERC721 collection doesn't have any mintable tokens left, it will revert using the ERC721 error, not in the marketplace!",
        "params": {
          "catalogIndex": "Index of the sale within the catalog",
          "internalTokenIndex": "Index of the token within the range",
          "rangeIndex": "Index of the range within the offer"
        }
      },
      "constructor": {
        "details": "Should start up with the treasury, node and treasury fee",
        "params": {
          "_nodeFee": "Fee given to the node on every sale (Recommended default: 1%)",
          "_treasury": "The address of the Treasury",
          "_treasuryFee": "Fee given to the treasury every sale (Recommended default: 9%)"
        }
      },
      "contractToOfferRange(address,uint256)": {
        "params": {
          "erc721Address": "Address of the RAIR Token contract",
          "offerIndex": "Index of the offer with all the ranges",
          "productIndex": "Index of the product"
        }
      },
      "getOfferCount()": {
        "details": "Includes completed collections though"
      },
      "getOfferInfo(uint256)": {
        "details": "Translates the internal offer schema to individual values",
        "params": {
          "_index": "Index of the offer in this contract"
        }
      },
      "getOfferRangeInfo(uint256,uint256)": {
        "details": "Translates the internal offer schema to individual values",
        "params": {
          "offerIndex": "Index of the offer in this contract",
          "rangeIndex": "Index of the range inside the contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setNodeFee(uint16)": {
        "params": {
          "_newFee": "New Fee"
        }
      },
      "setTreasuryAddress(address)": {
        "details": "Make sure the treasury is a wallet address!If the treasury is a contract, make sure it has a receive function!",
        "params": {
          "_newTreasury": "New address"
        }
      },
      "setTreasuryFee(uint16)": {
        "params": {
          "_newFee": "New Fee"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "validateRoles(address)": {
        "details": "Doubles as a view function for anyone wondering if they can mint or if they need to approve the marketplace",
        "params": {
          "tokenAddress": "Address of the token to validate"
        }
      }
    },
    "title": "Minter Marketplace ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addOffer(address,uint256,uint256[],uint256[],uint256[],string[],address)": {
        "notice": "Adds an offer to the market's catalog"
      },
      "buyToken(uint256,uint256,uint256)": {
        "notice": "Receives funds and mints a new token for the sender"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "contractToOfferRange(address,uint256)": {
        "notice": "View function that returns the offer given a contract address and a product index"
      },
      "getOfferCount()": {
        "notice": "Returns the number of collections on the market"
      },
      "getOfferInfo(uint256)": {
        "notice": "Returns the basic information about an offer"
      },
      "getOfferRangeInfo(uint256,uint256)": {
        "notice": "Returns the information about an offer's range"
      },
      "setNodeFee(uint16)": {
        "notice": "Sets the new fee paid to nodes"
      },
      "setTreasuryAddress(address)": {
        "notice": "Sets the new treasury address"
      },
      "setTreasuryFee(uint16)": {
        "notice": "Sets the new treasury fee"
      },
      "validateRoles(address)": {
        "notice": "Validates that the Minter Marketplace and the message sender have the correct roles inside the ERC721"
      }
    },
    "notice": "Handles the minting of ERC721 RAIR Tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 550,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4714,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "_contractToOffers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4719,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "customPayments",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(customPayment)4705_storage)"
      },
      {
        "astId": 4723,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "offerCatalog",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(offer)4691_storage)dyn_storage"
      },
      {
        "astId": 4725,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "treasury",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4727,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "openSales",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4729,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "treasuryFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 4731,
        "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
        "label": "nodeFee",
        "offset": 2,
        "slot": "6",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(offer)4691_storage)dyn_storage": {
        "base": "t_struct(offer)4691_storage",
        "encoding": "dynamic_array",
        "label": "struct Minter_Marketplace.offer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(customPayment)4705_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Minter_Marketplace.customPayment)",
        "numberOfBytes": "32",
        "value": "t_struct(customPayment)4705_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(customPayment)4705_storage": {
        "encoding": "inplace",
        "label": "struct Minter_Marketplace.customPayment",
        "members": [
          {
            "astId": 4701,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "recipients",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4704,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "percentages",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(offer)4691_storage": {
        "encoding": "inplace",
        "label": "struct Minter_Marketplace.offer",
        "members": [
          {
            "astId": 4671,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "contractAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4673,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "nodeAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4675,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "productIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4678,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "tokenRangeStart",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4681,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "tokenRangeEnd",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4684,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "tokensAllowed",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4687,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "rangePrice",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4690,
            "contract": "contracts/Marketplaces/MarketplaceMinter.sol:Minter_Marketplace",
            "label": "rangeName",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}